/* Fixed Variant of Wide Mouth Frog protocol */

/* Event 1: A begins "A,B,KeyAB" */
/* Message 1: A->S  A */
/* Message 2: S->A  NonceS */
/* Message 3: A->S  A,{B,KeyAB,NonceS}KeyAS */
/* Message 4: S->B  () */
/* Message 5: B->S  NonceB */
/* Message 6: S->B  {A,KeyAB,NonceB}KeyBS */
/* Event 2: B ends "A,B,KeyAB" */

(news db)
(news sender)
(news receiver)
( 
  /* Server */
  *(net?a.
    (new nonceA)
    (net!nonceA
    | net?msg2.
      match msg2 is (a,ctext).
      db??x.
      match x is (a, keyA).
      decrypt ctext is {y}keyA.
      case y 
        is inl(msg3).
          split msg3 is (b,msg32).
          split msg32 is (keyAB,nonceA2).
          check nonceA is nonceA2.
          (net!()
          |net?nonB.
           db??y.
           match x is (b, keyB).
           net!{inr((a,(keyAB,nonB)))}keyB
           )
       is inr(d).O
    )
   )
|
 /* Sender */
 *(sender??x.
   split x is (a, key).
   net?b.
  (new skey)
    begin (a,(b,skey)).
    (net!a
    |net?non.
     net!(a,{inl((b,(skey,non)))}key)
    )
   )
|
 /* Receiver */
 *(receiver??x.
   split x is (b, key).
   net?dummy.
    (new nonce)
    (net!nonce
    |net?ct.
     decrypt ct is {y}key.
     case y 
       is inl(d).O
       is inr(msg4).
        split msg4 is (a,msg42).
        split msg42 is (skey,nonce2).
        check nonce is nonce2.
        end (a,(b,skey)).O
    )
   )
|*(new p)(new keyP)  /*** infinitely participants of the protocol ***/
   (*net!p |
    *db!!(p,keyP) | 
    *sender!!(p,keyP) | 
    *receiver!!(p,keyP))
)